// lib/core/models/preference_model.dart (Freezed Version)

import 'package:flutter/material.dart'; // For ThemeMode
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:cloud_firestore/cloud_firestore.dart'; // For Firestore converters
import 'package:selene/core/constants/preference_constants.dart'; // For defaults [cite: uploaded:lib/core/constants/preference_constants.dart]

part 'preference_model.freezed.dart'; // Generated by Freezed
part 'preference_model.g.dart'; // Generated by JsonSerializable

@freezed
abstract class PreferenceModel with _$PreferenceModel {
  const PreferenceModel._(); // Private constructor for adding methods

  const factory PreferenceModel({
    // Use @Default for values that shouldn't be null and have constants
    @Default(kDefaultThemeMode) ThemeMode themeMode,
    // Nullable fields don't need @Default if null is acceptable
    @Default(kDefaultThemeID) String themeID,
    @Default(kDefaultContrastLevel) double contrastLevel,
    @Default(kDefaultBlendLevel) double blendLevel,
    @Default(kDefaultEinkMode) bool einkMode,
    @Default(kDefaultPureBlackMode) bool pureBlackMode,
  }) = _PreferenceModel;

  /// Factory constructor for creating a new PreferenceModel instance from a map.
  /// Used for deserialization from JSON.
  factory PreferenceModel.fromJson(Map<String, dynamic> json) =>
      _$PreferenceModelFromJson(json);

  /// Factory constructor for creating a new PreferenceModel instance from a Firestore snapshot.
  factory PreferenceModel.fromFirestore(
    DocumentSnapshot<Map<String, dynamic>> snapshot,
    SnapshotOptions? options,
  ) {
    final data = snapshot.data();
    // Handle potential null data if the document doesn't exist
    if (data == null) {
      // Return default values if the document is missing
      return const PreferenceModel();
    }
    // Potentially add document ID if needed, though usually handled by the repository/service
    // data['documentId'] = snapshot.id;
    return PreferenceModel.fromJson(data);
  }

  /// Method for converting a PreferenceModel instance to a map for Firestore.
  /// Used for serialization to JSON before writing to Firestore.
  Map<String, dynamic> toFirestore(SetOptions? options) {
    // Use the generated toJson method
    return toJson();
  }
}
