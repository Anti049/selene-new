import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:selene/core/database/models/preference_model.dart';
import 'package:dartx/dartx.dart';

class AuthRepository {
  final FirebaseAuth _firebaseAuth;
  final FirebaseFirestore _firestore;

  AuthRepository(this._firebaseAuth, this._firestore);

  Stream<User?> get authStateChanges => _firebaseAuth.authStateChanges();
  User? get currentUser => _firebaseAuth.currentUser;
  String? get currentUserId => _firebaseAuth.currentUser?.uid;

  Future<void> _initializeNewUser(User newUser) async {
    final userId = newUser.uid;
    final userDocRef = _firestore.collection('users').doc(userId);
    final prefsDocRef = userDocRef.collection('settings').doc('preferences');

    // If preferences already exist, DON'T overwrite them
    final prefsDocSnapshot = await prefsDocRef.get();
    if (prefsDocSnapshot.exists) {
      return;
    }

    // Write transaction (optional but good for atomicity)
    await _firestore
        .runTransaction((transaction) async {
          // 1. Create the user profile document (add relevant fields)
          transaction.set(userDocRef, {
            'uid': userId,
            'email': newUser.email, // Store email if available/desired
            'createdAt':
                FieldValue.serverTimestamp(), // Good practice to timestamp
            'displayName':
                newUser.displayName ??
                (newUser.email.isNotNullOrEmpty
                    ? newUser.email?.substring(0, newUser.email?.indexOf('@'))
                    : null), // If available (e.g., from Google Sign-In)
            // Add any other initial profile fields
          });

          // 2. Create the initial preferences document with defaults
          //    Get default values from your PreferenceModel factory
          const defaultPreferences = PreferenceModel();
          // Use the .toFirestore() method generated by Freezed/json_serializable
          transaction.set(prefsDocRef, defaultPreferences.toFirestore(null));
        })
        .catchError((error) {
          print("Failed to initialize user data: $error");
          // Consider how to handle this failure - maybe delete the auth user?
          // Or queue a retry? For now, just log it.
        });
  }

  Future<UserCredential?> signUpWithEmailAndPassword(
    String email,
    String password,
  ) async {
    try {
      UserCredential userCredential = await _firebaseAuth
          .createUserWithEmailAndPassword(email: email, password: password);
      if (userCredential.user != null) {
        await _initializeNewUser(userCredential.user!);
      }
      return userCredential;
    } on FirebaseAuthException catch (e) {
      // Handle specific errors (e.g., email-already-in-use)
      print('Signup Error: ${e.message}'); // Log or display error
      return null; // Or throw a custom exception
    }
  }

  Future<UserCredential?> signInWithEmailAndPassword(
    String email,
    String password,
  ) async {
    try {
      UserCredential userCredential = await _firebaseAuth
          .signInWithEmailAndPassword(email: email, password: password);
      if (userCredential.user != null) {
        await _initializeNewUser(userCredential.user!);
      }
      return userCredential;
    } on FirebaseAuthException catch (e) {
      // Handle specific errors (e.g., user-not-found, wrong-password)
      print('Signin Error: ${e.message}'); // Log or display error
      return null; // Or throw a custom exception
    }
  }

  Future<void> signOut() async {
    await _firebaseAuth.signOut();
  }
}
